services:
  frontend:
      build: 
        context: ./frontend
        dockerfile: Dockerfile
      ports:
        - "5173:5173"
      volumes:
          - ./frontend:/app/frontend
          - /app/frontend/node_modules
      environment:
        - CHOKIDAR_USEPOLLING=true  # Enable polling for hot reload
      depends_on:
        - backend
      networks:
        - app-network
      restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./backend:/app/backend
      - /app/backend/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    
  postgres:
    image: postgres:16-alpine 
    ports:
      - "5433:5432" 
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
      
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: